// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Student
  Tutor
  Admin
}

model User {
  id          Int               @id @default(autoincrement())
  firstname   String
  lastname    String
  fullname    String
  email       String            @unique
  phoneNumber String            @unique
  password    String
  role        UserRole
  username    String            @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  Status      Boolean
  tokens      UserAccessToken[]
  courses     Enrollment[]
  subcription Subscription[]
}

model Course {
  id           Int            @id @default(autoincrement())
  title        String
  description  String?
  courseCode   String         @unique
  duration     Int            @default(0)
  tutorId      Int
  status       Boolean        @default(true)
  video        Video[]
  document     Document[]
  students     Enrollment[]
  subscription Subscription[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Enrollment {
  id             Int           @id @default(autoincrement())
  courseId       Int
  studentId      Int
  subscriptionId Int
  course         Course        @relation(fields: [courseId], references: [id])
  student        User          @relation(fields: [studentId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  createdAt DateTime @default(now())
  progress  Float?

  @@unique([courseId, studentId])
}

model Subscription {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Float
  studentId   Int
  courseId    Int
  enrollment  Enrollment[]
  student     User         @relation(fields: [studentId], references: [id])
  // Define a one-to-many relationship: A subscription is associated with one course.
  course      Course       @relation(fields: [courseId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model PushNotifications {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserAccessToken {
  id          Int      @id @default(autoincrement())
  accessToken String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime @default(now())
  revoked     Boolean  @default(false)
}

model Video {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  title     String
  url       String
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
