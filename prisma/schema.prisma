// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Student
  Tutor
  Admin
}

enum ContentType {
  Video
  Document
}

model User {
  id          Int               @id @default(autoincrement())
  firstname   String
  lastname    String
  fullname    String
  email       String            @unique
  phoneNumber String            @unique
  password    String
  role        UserRole
  username    String            @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  Status      Boolean
  tokens      UserAccessToken[]
  courses     Course[]
  enrollments Enrollment[]
   notifications     Notification[]

}

model Course {
  id          Int          @id @default(autoincrement())
  title       String       @unique
  description String?
  category    String
  code        String       @unique
  courseCode  String       @unique
  duration    Int          @default(0)
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  status      Boolean      @default(false)
  isPublished Boolean      @default(false)
  content     Content[]
  students    Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  courseId  Int
  studentId Int
  course    Course   @relation(fields: [courseId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  progress  Float?

  @@unique([courseId, studentId])
}

model PushNotifications {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  sentBy      String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserAccessToken {
  id          Int      @id @default(autoincrement())
  accessToken String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime @default(now())
  revoked     Boolean  @default(false)
}

model Content {
  id        Int         @id @default(autoincrement())
  uuid      String      @unique @default(uuid())
  title     String
  url       String
  courseId  Int
  course    Course      @relation(fields: [courseId], references: [id])
  type      ContentType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Notification{
  id        Int       @id @default(autoincrement())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  title     String
  content   String
  is_read   Boolean   @default(false)
  read_at   DateTime?
  sent_by   String    @default("system")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
}